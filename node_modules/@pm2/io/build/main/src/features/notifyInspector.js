"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const async_1 = require("async");
const json_1 = require("../utils/json");
const serviceManager_1 = require("../serviceManager");
const transport_1 = require("../utils/transport");
class NotifyInspector {
    constructor() {
        this.inspectorService = serviceManager_1.ServiceManager.get('inspector');
        this.exceptionsTrapped = [];
    }
    init() {
        this.inspectorService.createSession();
        this.inspectorService.connect();
        this.catchAllDebugger();
    }
    destroy() {
        this.inspectorService.disconnect();
    }
    trapException(listener) {
        return (error) => {
            // log it
            if (listener === 'unhandledRejection') {
                console.log('You have triggered an unhandledRejection, you may have forgotten to catch a Promise rejection:');
            }
            console.error(error);
            // create object to be send
            const context = this.exceptionsTrapped.find((exception) => {
                return !!exception.error.description.match(error.message);
            });
            error = json_1.default.jsonize(error);
            // inject async stackframe
            if (context && context.asyncStackTrace) {
                const fetchFrames = (entry) => {
                    return entry.parent ? entry.callFrames.concat(fetchFrames(entry.parent)) : entry.callFrames;
                };
                const asyncStack = fetchFrames(context.asyncStackTrace)
                    .filter(frame => frame.url.indexOf('internal') === -1)
                    .map(frame => {
                    return `    at ${frame.functionName || '<anonymous>'} (${frame.url}:${frame.lineNumber}:${frame.columnNumber})`;
                });
                asyncStack.unshift('');
                error.stack = error.stack.concat(asyncStack.join('\n'));
            }
            error.frame = context ? context.frame : undefined;
            // send it
            transport_1.default.send({
                type: 'process:exception',
                data: error
            });
            // at this point the process should exit
            process.exit(1);
        };
    }
    isObjectInteresting(entry) {
        if (!entry.value)
            return false;
        if (!entry.value.objectId)
            return false;
        if (entry.value.type !== 'object')
            return false;
        switch (entry.value.description) {
            case 'IncomingMessage': {
                return true;
            }
        }
        switch (entry.name) {
            case 'headers': {
                return true;
            }
            case 'user': {
                return true;
            }
            case 'token': {
                return true;
            }
            case 'body': {
                return true;
            }
            case 'params': {
                return true;
            }
            case 'query': {
                return true;
            }
        }
        return false;
    }
    isPropertyIntesting(entry, parent) {
        if (!entry.value)
            return false;
        if (entry.value.type === 'object' && entry.properties)
            return true;
        if (parent && parent.name === 'headers')
            return true;
        if (parent && parent.name === 'body')
            return true;
        if (parent && parent.name === 'params')
            return true;
        if (parent && parent.name === 'query')
            return true;
        if (entry.name === '__proto__')
            return false;
        switch (entry.name) {
            case 'url': {
                return true;
            }
            case 'user': {
                return true;
            }
            case 'token': {
                return true;
            }
            case 'method': {
                return true;
            }
            case 'ip': {
                return true;
            }
            case 'query': {
                return true;
            }
            case 'path': {
                return true;
            }
            case 'body': {
                return true;
            }
            case 'params': {
                return true;
            }
        }
        return false;
    }
    formatProperty(property) {
        const value = property.value && property.value.value ? property.value.value : null;
        const description = property.value && property.value.description ? property.value.description : null;
        return {
            name: property.name,
            value: value || description || property.value,
            properties: property.properties
        };
    }
    fetchObjectProperties(session, object, cb) {
        session.post('Runtime.getProperties', {
            objectId: object,
            ownProperties: true
        }, (err, data) => {
            if (err)
                return cb(err, undefined);
            async_1.default.map(data.result, (entry, next) => {
                if (entry.value && entry.value.objectId && this.isObjectInteresting(entry)) {
                    return this.fetchObjectProperties(session, entry.value.objectId, (err, properties) => {
                        if (err)
                            return next(err);
                        // if some properties has been dumped, attach them
                        if (properties) {
                            entry.properties = properties
                                .filter(property => {
                                return this.isPropertyIntesting(property, entry);
                            })
                                .map(this.formatProperty);
                        }
                        return next(undefined, this.formatProperty(entry));
                    });
                }
                else {
                    return next(undefined, this.formatProperty(entry));
                }
            }, cb);
        });
    }
    catchAllDebugger() {
        const session = this.inspectorService.createSession();
        this.inspectorService.connect();
        // trap exception so we can re-use them with the debugger
        process.on('uncaughtException', this.trapException('uncaughtException'));
        process.on('unhandledRejection', this.trapException('unhandledRejection'));
        // enable all the debugger options
        session.post('Debugger.enable');
        session.post('Debugger.setAsyncCallStackDepth', {
            maxDepth: process.env.PM2_APM_ASYNC_STACK_DEPTH || 50
        });
        session.post('Debugger.setPauseOnExceptions', { state: 'uncaught' });
        // register handler for paused event
        session.on('Debugger.paused', ({ params }) => {
            // should not happen but anyway
            if (params.reason !== 'exception' && params.reason !== 'promiseRejection') {
                return session.post('Debugger.resume');
            }
            if (!params.data)
                return session.post('Debugger.resume');
            const error = params.data;
            // get only the current frame
            const frame = params.callFrames[0];
            // on each frame, dump all scopes
            async_1.default.map(frame.scopeChain, (scope, nextScope) => {
                if (scope.type === 'global')
                    return nextScope();
                if (!scope.object.objectId)
                    return nextScope();
                // get context of the scope
                return this.fetchObjectProperties(session, scope.object.objectId, (error, context) => {
                    return nextScope(error, Object.assign(scope, {
                        context,
                        object: undefined
                    }));
                });
            }, (err, scopes) => {
                if (err) {
                    console.error(err);
                    return session.post('Debugger.resume');
                }
                // we can remove some scope so we want to remove null entry
                scopes = scopes.filter(scope => !!scope);
                // inspect each scope to retrieve his context
                this.exceptionsTrapped.push({
                    error,
                    asyncStackTrace: params.asyncStackTrace,
                    frame: Object.assign(frame, {
                        scopeChain: scopes
                    })
                });
                // continue execution
                return session.post('Debugger.resume');
            });
        });
    }
}
exports.default = NotifyInspector;
//# sourceMappingURL=data:application/json;base64,