"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const netModule = require("net");
const metricConfig_1 = require("../utils/metricConfig");
const debug_1 = require("debug");
const debug = debug_1.default('axm:network');
class NetworkMetric {
    constructor(metricFeature) {
        this.defaultConf = {
            ports: false,
            traffic: true
        };
        this.metricFeature = metricFeature;
    }
    init(config) {
        config = metricConfig_1.default.getConfig(config, this.defaultConf);
        if (config.traffic) {
            this.catchTraffic(config.traffic);
        }
        if (config.ports) {
            this.catchPorts();
        }
    }
    destroy() {
        clearTimeout(this.timer);
        debug('NetworkMetric destroyed !');
    }
    catchPorts() {
        const portsList = [];
        let openedPorts = 'N/A';
        this.metricFeature.metric({
            name: 'Open ports',
            value: function () { return openedPorts; }
        });
        const originalListen = netModule.Server.prototype.listen;
        netModule.Server.prototype.listen = function () {
            const port = parseInt(arguments[0], 10);
            if (!isNaN(port) && portsList.indexOf(port) === -1) {
                portsList.push(port);
                openedPorts = portsList.sort().join();
            }
            this.once('close', function () {
                if (portsList.indexOf(port) > -1) {
                    portsList.splice(portsList.indexOf(port), 1);
                    openedPorts = portsList.sort().join();
                }
            });
            return originalListen.apply(this, arguments);
        };
    }
    catchTraffic(config) {
        let download = 0;
        let upload = 0;
        let up = '0 B/sec';
        let down = '0 B/sec';
        const filter = function (bytes) {
            let toFixed = 0;
            if (bytes < 1024) {
                toFixed = 6;
            }
            else if (bytes < (1024 * 1024)) {
                toFixed = 3;
            }
            else if (bytes !== 0) {
                toFixed = 2;
            }
            bytes = (bytes / (1024 * 1024)).toFixed(toFixed);
            let cutZeros = 0;
            for (let i = (bytes.length - 1); i > 0; --i) {
                if (bytes[i] === '.') {
                    ++cutZeros;
                    break;
                }
                if (bytes[i] !== '0')
                    break;
                ++cutZeros;
            }
            if (cutZeros > 0) {
                bytes = bytes.slice(0, -(cutZeros));
            }
            return (bytes + ' MB/s');
        };
        const interval = setInterval(function () {
            up = filter(upload);
            down = filter(download);
            upload = 0;
            download = 0;
        }, 999);
        interval.unref();
        if (config === true || config.download === true) {
            this.metricFeature.metric({
                name: 'Network Download',
                agg_type: 'sum',
                value: function () {
                    return down;
                }
            });
        }
        if (config === true || config.upload === true) {
            this.metricFeature.metric({
                name: 'Network Upload',
                agg_type: 'sum',
                value: function () {
                    return up;
                }
            });
        }
        if (config === true || config.upload === true) {
            const originalWrite = netModule.Socket.prototype.write;
            netModule.Socket.prototype.write = function (data) {
                if (data.length) {
                    upload += data.length;
                }
                return originalWrite.apply(this, arguments);
            };
        }
        if (config === true || config.download === true || Number.isInteger(config.download)) {
            const delay = Number.isInteger(config.download) ? config.download : 500;
            this.timer = setTimeout(() => {
                const originalRead = netModule.Socket.prototype.read;
                netModule.Socket.prototype.read = function () {
                    if (!this.monitored) {
                        this.monitored = true;
                        this.on('data', function (data) {
                            if (data.length) {
                                download += data.length;
                            }
                        });
                    }
                    return originalRead.apply(this, arguments);
                };
            }, delay);
            this.timer.unref();
        }
    }
}
exports.default = NetworkMetric;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29yay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXRyaWNzL25ldHdvcmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBZ0M7QUFHaEMsd0RBQWdEO0FBRWhELGlDQUF5QjtBQUN6QixNQUFNLEtBQUssR0FBRyxlQUFLLENBQUMsYUFBYSxDQUFDLENBQUE7QUFFbEM7SUFTRSxZQUFhLGFBQTZCO1FBTGxDLGdCQUFXLEdBQUc7WUFDcEIsS0FBSyxFQUFFLEtBQUs7WUFDWixPQUFPLEVBQUUsSUFBSTtTQUNkLENBQUE7UUFHQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQTtJQUNwQyxDQUFDO0lBRUQsSUFBSSxDQUFFLE1BQU87UUFDWCxNQUFNLEdBQUcsc0JBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUV6RCxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7U0FDbEM7UUFFRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELE9BQU87UUFDTCxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3hCLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFFRCxVQUFVO1FBQ1IsTUFBTSxTQUFTLEdBQWUsRUFBRSxDQUFBO1FBQ2hDLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQTtRQUV2QixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztZQUN4QixJQUFJLEVBQU0sWUFBWTtZQUN0QixLQUFLLEVBQUssY0FBYyxPQUFPLFdBQVcsQ0FBQSxDQUFDLENBQUM7U0FDN0MsQ0FBQyxDQUFBO1FBRUYsTUFBTSxjQUFjLEdB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